{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/CommentIndex.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Media, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nvar CommentIndex = function CommentIndex(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentEntry = _useState2[0],\n      setCommentEntry = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentEditEntry = _useState4[0],\n      setCommentEditEntry = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      editArray = _useState6[0],\n      setEditArray = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      comments = _useState8[0],\n      setComments = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      success = _useState10[0],\n      setSuccess = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      error = _useState12[0],\n      setError = _useState12[1];\n\n  useEffect(function () {\n    getComments();\n  }, []);\n\n  var handleChange = function handleChange(e) {\n    setCommentEntry(e.target.value);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    addToComments();\n  };\n\n  var handleChangeEdit = function handleChangeEdit(e) {\n    e.preventDefault();\n    setCommentEditEntry(e.target.value);\n  };\n\n  var addToComments = function addToComments() {\n    fetch(\"/comments\", {\n      body: JSON.stringify({\n        post: commentEntry,\n        trail_id: props.match.params.id\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    }).then(function (response) {\n      if (response.ok) {\n        setSuccess(true);\n        setCommentEntry(\"\");\n      } else setError(true);\n    }).then(function () {\n      getComments();\n    })[\"catch\"](function (error) {\n      console.log(\"error:\", error);\n    });\n  }; //fetch comments\n\n\n  function getComments() {\n    return _getComments.apply(this, arguments);\n  }\n\n  function _getComments() {\n    _getComments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, data, sortedData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/comments');\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n\n              //all good?\n              if (response.status === 200) {\n                //check the console to make sure we have all the trails\n                console.log(\"data\", data);\n                sortedData = data.filter(function (trail) {\n                  return trail.trail_id == props.match.params.id;\n                }); //populate the newTrails state array with data\n\n                setComments(sortedData);\n                console.log(\"sort\", sortedData);\n              }\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n    return _getComments.apply(this, arguments);\n  }\n\n  var handleDelete = function handleDelete(e) {\n    deleteComment(e);\n  };\n\n  var deleteComment = function deleteComment(id) {\n    fetch(\"/comments/\".concat(id), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    }).then(function (response) {\n      if (response.ok) {\n        // If favorite delete request is successful, set favorited to false\n        setSuccess(true);\n      }\n    }).then(function () {\n      // Refresh the API call after delete action\n      getComments();\n    });\n  };\n\n  var handleEditClick = function handleEditClick(id) {\n    if (!editArray.includes(id)) {\n      var temp = [].concat(_toConsumableArray(editArray), [id]);\n      console.log(\"editArray after add\", temp);\n      setEditArray(temp);\n    } else {\n      console.log(\"index of id\", editArray.indexOf(id));\n\n      var _temp = editArray.splice(editArray.indexOf(id));\n\n      console.log(\"editArray after deletion\", _temp);\n      setEditArray(_temp);\n    }\n\n    getCommentBody(id);\n  };\n\n  function getCommentBody(_x) {\n    return _getCommentBody.apply(this, arguments);\n  }\n\n  function _getCommentBody() {\n    _getCommentBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch(\"/comments/\".concat(id, \"/edit\"));\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context2.sent;\n              console.log(data);\n\n              if (response.ok) {\n                setCommentEditEntry(data.post);\n              }\n\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n    return _getCommentBody.apply(this, arguments);\n  }\n\n  var updateComment = function updateComment(id, trailId) {\n    fetch(\"/comments/\".concat(id), {\n      body: JSON.stringify({\n        post: commentEditEntry,\n        trail_id: trailId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"PATCH\"\n    }).then(function (response) {\n      if (response.ok) {\n        setSuccess(true);\n        setShowEdit(false);\n      } else setError(true);\n    }).then(function () {\n      getComments();\n    })[\"catch\"](function (error) {\n      console.log(\"error:\", error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"commentEntry\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, \"Add Comment\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    name: \"commentEntry\",\n    id: \"commentEntry\",\n    value: commentEntry,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Submit\"), comments.map(function (comment, index) {\n    var editable = false;\n    if (props.user_id === comment.user_id) editable = true;\n    var date = comment.updated_at.substring(0, 10);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, editArray.includes(comment.id) && /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"commentEditEntry\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, \"Edit Comment\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"commentEditEntry\",\n      id: \"commentEditEntry\",\n      value: commentEditEntry,\n      onChange: handleChangeEdit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: function onClick() {\n        return updateComment(comment.id, comment.trail_id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, \"Update\")), /*#__PURE__*/React.createElement(Media, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Media, {\n      left: true,\n      href: \"#\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Media, {\n      object: true,\n      \"data-src\": \"#\",\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    })), !editArray.includes(comment.id) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Media, {\n      body: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }, comment.post), /*#__PURE__*/React.createElement(Media, {\n      body: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, date)), editable && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      onClick: function onClick() {\n        return handleEditClick(comment.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"danger\",\n      onClick: function onClick() {\n        return handleDelete(comment.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, \"Delete\"))));\n  }));\n};\n\nexport default CommentIndex;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/CommentIndex.js"],"names":["React","useState","useEffect","Container","Media","Button","Form","FormGroup","Label","Input","FormText","CommentIndex","props","commentEntry","setCommentEntry","commentEditEntry","setCommentEditEntry","editArray","setEditArray","comments","setComments","success","setSuccess","error","setError","getComments","handleChange","e","target","value","handleSubmit","preventDefault","addToComments","handleChangeEdit","fetch","body","JSON","stringify","post","trail_id","match","params","id","headers","method","then","response","ok","console","log","json","data","status","sortedData","filter","trail","handleDelete","deleteComment","handleEditClick","includes","temp","indexOf","splice","getCommentBody","updateComment","trailId","setShowEdit","map","comment","index","editable","user_id","date","updated_at","substring"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Container, Media, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nconst CommentIndex = (props) => {\n  const [commentEntry, setCommentEntry]= useState(\"\")\n  const [commentEditEntry, setCommentEditEntry] = useState(\"\")\n  const [editArray, setEditArray] = useState([])\n  const [comments, setComments]=useState([])\n  const [success, setSuccess ]=useState(false)\n  const [error, setError ]=useState(false)\n\n  useEffect(() => {\n    getComments()},[])\n\n  const handleChange = (e) =>{\n    setCommentEntry(e.target.value)\n  }\n  const handleSubmit = (e) =>{\n    e.preventDefault()\n    addToComments()\n  }\n\n  const handleChangeEdit = e => {\n    e.preventDefault()\n    setCommentEditEntry(e.target.value)\n  }\n\n  const addToComments = () => {\n    fetch(\"/comments\", {\n      body: JSON.stringify({post: commentEntry, trail_id: props.match.params.id}),\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    })\n    .then(response => {\n      if (response.ok) {\n        setSuccess(true)\n        setCommentEntry(\"\")\n      }\n      else setError(true)\n    })\n    .then(()=>{\n      getComments()\n    })\n    .catch(error => {\n      console.log(\"error:\",error)\n    })\n  }\n  //fetch comments\n  async function getComments() {\n    try {\n      //GET data from the backend\n      let response = await fetch('/comments')\n      \n        let data = await response.json();\n        //all good?\n        if(response.status === 200) {\n          //check the console to make sure we have all the trails\n          console.log(\"data\", data)\n          let sortedData = data.filter(trail => {\n            return trail.trail_id == props.match.params.id\n          })\n          //populate the newTrails state array with data\n          setComments(sortedData)\n          console.log(\"sort\", sortedData)\n        }\n      } catch (err) {\n        console.log(err)\n      }\n    }\n  const handleDelete = (e) => {\n    deleteComment(e)\n  }\n  const deleteComment = (id) => {\n    fetch(`/comments/${id}`, {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    })\n    .then(response => {\n      if (response.ok) {\n        // If favorite delete request is successful, set favorited to false\n        setSuccess(true)\n      }\n    })\n    .then(() => {\n      // Refresh the API call after delete action\n      getComments()\n    })\n  }\n\n  const handleEditClick = id => {\n    if (!editArray.includes(id)) {\n      let temp = [...editArray, id]\n      console.log(\"editArray after add\",temp)\n      setEditArray(temp)\n    } else {\n      console.log(\"index of id\",editArray.indexOf(id))\n      let temp = editArray.splice(editArray.indexOf(id))\n      console.log(\"editArray after deletion\", temp)\n      setEditArray(temp)\n    }\n    getCommentBody(id)\n  }\n\n  async function getCommentBody(id) {\n    try {\n      let response = await fetch(`/comments/${id}/edit`)\n      let data = await response.json()\n      console.log(data)\n      if (response.ok) {\n        setCommentEditEntry(data.post)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const updateComment = (id, trailId) => {\n    fetch(`/comments/${id}`, {\n      body: JSON.stringify({post: commentEditEntry, trail_id: trailId}),\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"PATCH\"\n    })\n    .then(response => {\n      if (response.ok) {\n        setSuccess(true)\n        setShowEdit(false)\n      }\n      else setError(true)\n    })\n    .then(()=>{\n      getComments()\n    })\n    .catch(error => {\n      console.log(\"error:\",error)\n    })\n  }\n\n  return ( \n  \n  <Container>\n      <FormGroup>\n        <Label htmlFor=\"commentEntry\">Add Comment</Label>\n        <Input type=\"textarea\" name=\"commentEntry\" id=\"commentEntry\" value={ commentEntry } onChange={ handleChange }/>\n      </FormGroup>\n      <Button onClick={ handleSubmit }>Submit</Button>\n    { comments.map((comment, index)=> {\n      let editable = false\n        if(props.user_id === comment.user_id) editable = true\n        let date = comment.updated_at.substring(0,10)\n      return(\n        <>\n          {editArray.includes(comment.id) &&\n            <FormGroup>\n              <Label htmlFor=\"commentEditEntry\">Edit Comment</Label>\n              <Input type=\"textarea\" name=\"commentEditEntry\" id=\"commentEditEntry\" value={ commentEditEntry } onChange={ handleChangeEdit }/>\n              <Button onClick={ () => updateComment(comment.id,comment.trail_id) }>Update</Button>\n            </FormGroup>\n          }\n          \n          <Media key = { index }>\n            <Media left href=\"#\">\n              <Media object data-src='#' alt=\"\" />\n            </Media>\n            {!editArray.includes(comment.id) &&\n              <>\n                <Media body>\n                  { comment.post }\n                </Media>\n                <Media body>\n                  { date }\n                </Media>\n              </>\n            }\n            \n            { editable &&\n              <>\n                <Button onClick={ () => handleEditClick(comment.id) }>Edit</Button>\n                <Button color=\"danger\" onClick={ () => handleDelete(comment.id) }>Delete</Button>\n              </>\n            }\n          </Media>\n        </>\n      )\n    })}\n  </Container>\n  );\n};\n\nexport default CommentIndex"]},"metadata":{},"sourceType":"module"}