{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/partials/user/Badges.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\n\nvar Badges = function Badges(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      badges = _useState2[0],\n      setBadges = _useState2[1];\n\n  useEffect(function () {\n    getBadges();\n  }, []);\n\n  function getBadges() {\n    return _getBadges.apply(this, arguments);\n  } // const commentCount = () => {\n  //   if \n  // }\n\n\n  function _getBadges() {\n    _getBadges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commentResponse, commentData, len;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/users/comments');\n\n            case 3:\n              commentResponse = _context.sent;\n              _context.next = 6;\n              return commentResponse.json();\n\n            case 6:\n              commentData = _context.sent;\n\n              if (commentResponse.ok) {\n                len = commentData.length;\n                console.log(\"user comments\", commentData);\n                if (len >= 5) setBadges([\"User\", \"Kinda User\", \"Super User\"]);else if (len >= 3) setBadges([\"User\", \"Kinda User\"]);else if (len >= 1) setBadges([\"User\"]);\n              } // let badgeResponse = await fetch('/badges')\n              // let badgeData = await badgeResponse.json()\n              // if (badgeResponse.ok) {\n              //   console.log(\"badges\", badgeData)\n              //   setBadges(badgeData)\n              // }\n\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n    return _getBadges.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Your Badges\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, badges.map(function (badge, index) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, badge);\n  })));\n};\n\nexport default Badges;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/partials/user/Badges.js"],"names":["React","useState","useEffect","Badges","props","badges","setBadges","getBadges","fetch","commentResponse","json","commentData","ok","len","length","console","log","map","badge","index"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK,EAAI;AAAA,kBACMH,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,MACfI,MADe;AAAA,MACPC,SADO;;AAGtBJ,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,SAAS;AACV,GAFQ,EAEP,EAFO,CAAT;;AAHsB,WAOPA,SAPO;AAAA;AAAA,IA+BtB;AACA;AACA;;;AAjCsB;AAAA,0EAOtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEgCC,KAAK,CAAC,iBAAD,CAFrC;;AAAA;AAEQC,cAAAA,eAFR;AAAA;AAAA,qBAG4BA,eAAe,CAACC,IAAhB,EAH5B;;AAAA;AAGQC,cAAAA,WAHR;;AAII,kBAAIF,eAAe,CAACG,EAApB,EAAwB;AAClBC,gBAAAA,GADkB,GACZF,WAAW,CAACG,MADA;AAEtBC,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,WAA7B;AACA,oBAAIE,GAAG,IAAG,CAAV,EAAaP,SAAS,CAAC,CAAC,MAAD,EAAS,YAAT,EAAuB,YAAvB,CAAD,CAAT,CAAb,KACK,IAAIO,GAAG,IAAG,CAAV,EAAaP,SAAS,CAAC,CAAC,MAAD,EAAS,YAAT,CAAD,CAAT,CAAb,KACA,IAAIO,GAAG,IAAG,CAAV,EAAaP,SAAS,CAAC,CAAC,MAAD,CAAD,CAAT;AACnB,eAVL,CAaI;AACA;AACA;AACA;AACA;AACA;;;AAlBJ;AAAA;;AAAA;AAAA;AAAA;AAoBIS,cAAAA,OAAO,CAACC,GAAR;;AApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPsB;AAAA;AAAA;;AAmCtB,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,MAAM,CAACY,GAAP,CAAW,UAACC,KAAD,EAAOC,KAAP,EAAiB;AAC3B,wBACE;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,KAAjB,CADF;AAGD,GAJA,CADH,CAFF,CADF;AAYD,CA/CD;;AAiDA,eAAef,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst Badges = props => {\n  const [badges, setBadges] = useState([])\n  \n  useEffect(() => {\n    getBadges()\n  },[])\n  \n  async function getBadges() {\n    try {\n      let commentResponse = await fetch('/users/comments')\n      let commentData = await commentResponse.json()\n      if (commentResponse.ok) {\n        let len = commentData.length\n        console.log(\"user comments\", commentData)\n        if (len >=5) setBadges([\"User\", \"Kinda User\", \"Super User\"])\n        else if (len >=3) setBadges([\"User\", \"Kinda User\"])\n        else if (len >=1) setBadges([\"User\"])\n      }\n\n\n      // let badgeResponse = await fetch('/badges')\n      // let badgeData = await badgeResponse.json()\n      // if (badgeResponse.ok) {\n      //   console.log(\"badges\", badgeData)\n      //   setBadges(badgeData)\n      // }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // const commentCount = () => {\n  //   if \n  // }\n  \n  return(\n    <>\n      <h4>Your Badges</h4>\n      <ul>\n        {badges.map((badge,index) => {\n          return(\n            <li key={index}>{badge}</li>\n          )\n        })}\n      </ul>\n    </>\n  )\n}\n\nexport default Badges"]},"metadata":{},"sourceType":"module"}