{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/TrailsProfile.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from \"react\";\nimport CommentIndex from './CommentIndex';\nimport TrailDisplay from '../partials/trailPartials/TrailDisplay.js';\nimport { Container } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n\nvar TrailsProfile = function TrailsProfile(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentTrail = _useState2[0],\n      setCurrentTrail = _useState2[1]; // Conditional rendering for the favorite button styling\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      favorited = _useState4[0],\n      setFavorited = _useState4[1]; // Favorite model id of the current trail showing (if favorited)\n\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      favId = _useState6[0],\n      setFavId = _useState6[1];\n\n  useEffect(function () {\n    getTrail();\n  }, []);\n\n  var handleFavorite = function handleFavorite() {\n    if (favorited) {\n      removeFromFavorites();\n    } else {\n      addToFavorites();\n    }\n  };\n\n  var addToFavorites = function addToFavorites() {\n    fetch('/favorites', {\n      body: JSON.stringify({\n        fav_trail_id: props.match.params.id\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    }).then(function (response) {\n      if (response.ok) {\n        // If favorite post request is successful, set favorited to true\n        setFavorited(true); // Refresh the API call after favoriting action\n\n        getTrail();\n      }\n    });\n  };\n\n  var removeFromFavorites = function removeFromFavorites() {\n    fetch(\"/favorites/\".concat(favId), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    }).then(function (response) {\n      if (response.ok) {\n        // If favorite delete request is successful, set favorited to false\n        setFavorited(false); // Refresh the API call after delete action\n\n        getTrail();\n      }\n    });\n  };\n\n  function getTrail() {\n    return _getTrail.apply(this, arguments);\n  }\n\n  function _getTrail() {\n    _getTrail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var trailsIdsArray, favResponse, favData, trailResponse, trailData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Declare array to hold only favorited Ids to be used in both if-statements below\n              trailsIdsArray = [];\n\n              if (!props.logged_in) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 5;\n              return fetch('/favorites');\n\n            case 5:\n              favResponse = _context.sent;\n              _context.next = 8;\n              return favResponse.json();\n\n            case 8:\n              favData = _context.sent;\n\n              if (favResponse.ok) {\n                console.log(\"favData:\", favData);\n                favData.map(function (value) {\n                  // Determine the favorite id (for use in the favorite delete call) if current trail is currently favorited\n                  if (value.fav_trail_id == props.match.params.id) {\n                    setFavId(value.id);\n                  }\n                }); // Create array of just the ids of the trails favorited by current user\n\n                trailsIdsArray = favData.map(function (value) {\n                  return value.fav_trail_id;\n                });\n                console.log(\"Fav trail Ids:\", trailsIdsArray);\n              }\n\n            case 10:\n              _context.next = 12;\n              return fetch(\"https://www.hikingproject.com/data/get-trails-by-id?ids=\".concat(props.match.params.id, \"&key=\").concat(props.apiKey));\n\n            case 12:\n              trailResponse = _context.sent;\n              _context.next = 15;\n              return trailResponse.json();\n\n            case 15:\n              trailData = _context.sent;\n\n              //all good?\n              if (trailResponse.ok) {\n                //check the console to make sure we have all the trails\n                console.log(\"trailData\", trailData.trails[0]); //populate the newTrails state array with trailData\n\n                setCurrentTrail(trailData.trails[0]); // Upon rednering the component, if the current trail id is one of the favorited ids of the current user, set Favorited to true\n\n                if (trailsIdsArray.includes(trailData.trails[0].id)) {\n                  setFavorited(true);\n                }\n              }\n\n              _context.next = 22;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 19]]);\n    }));\n    return _getTrail.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TrailDisplay, {\n    currentTrail: currentTrail,\n    favorited: favorited,\n    handleFavorite: handleFavorite,\n    logged_in: props.logged_in,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CommentIndex, {\n    trail_id: props.match.params.id,\n    user_name: props.user_name,\n    user_id: props.user_id,\n    trail_name: currentTrail.name,\n    logged_in: props.logged_in,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/trails/\".concat(trail.id, \"/questionnaire\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 61\n    }\n  }, \"Trail Questionnaire\"))));\n};\n\nexport default TrailsProfile;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/TrailsProfile.js"],"names":["React","useState","useEffect","CommentIndex","TrailDisplay","Container","NavLink","Button","TrailsProfile","props","currentTrail","setCurrentTrail","favorited","setFavorited","favId","setFavId","getTrail","handleFavorite","removeFromFavorites","addToFavorites","fetch","body","JSON","stringify","fav_trail_id","match","params","id","headers","method","then","response","ok","trailsIdsArray","logged_in","favResponse","json","favData","console","log","map","value","apiKey","trailResponse","trailData","trails","includes","user_name","user_id","name","trail"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport CommentIndex from './CommentIndex'\nimport TrailDisplay from '../partials/trailPartials/TrailDisplay.js'\nimport { Container } from 'reactstrap'\nimport { NavLink } from 'react-router-dom'\nimport { Button } from 'reactstrap'\n\n\nconst TrailsProfile = (props) => {\n  const [currentTrail, setCurrentTrail] = useState({})\n  // Conditional rendering for the favorite button styling\n  const [favorited, setFavorited] = useState(false)\n  // Favorite model id of the current trail showing (if favorited)\n  const [favId, setFavId] = useState()\n\n  useEffect(() => {\n    getTrail()\n },[])\n\n  const handleFavorite = () =>{\n    if (favorited) {\n      removeFromFavorites()\n    } else {\n      addToFavorites()\n    }\n  }\n\n  const addToFavorites = () => {\n    fetch('/favorites', {\n      body: JSON.stringify({fav_trail_id: props.match.params.id}),\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    })\n    .then(response => {\n      if (response.ok) {\n        // If favorite post request is successful, set favorited to true\n        setFavorited(true)\n        // Refresh the API call after favoriting action\n        getTrail()\n      }\n    })\n  }\n\n  const removeFromFavorites = () => {\n    fetch(`/favorites/${favId}`, {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    })\n    .then(response => {\n      if (response.ok) {\n        // If favorite delete request is successful, set favorited to false\n        setFavorited(false)\n        // Refresh the API call after delete action\n        getTrail()\n      }\n    })\n  }\n\n  async function getTrail() {\n    try {\n      // Declare array to hold only favorited Ids to be used in both if-statements below\n      let trailsIdsArray = []\n      if (props.logged_in) {\n        // Fetch JSON of favorites specific to current user\n        let favResponse = await fetch('/favorites')\n        let favData = await favResponse.json()\n        \n        if(favResponse.ok) {\n          console.log(\"favData:\", favData)\n          favData.map(value=> {\n            // Determine the favorite id (for use in the favorite delete call) if current trail is currently favorited\n            if (value.fav_trail_id == props.match.params.id) {\n              setFavId(value.id)\n            }\n          })\n          // Create array of just the ids of the trails favorited by current user\n          trailsIdsArray = favData.map(value=>value.fav_trail_id)\n          console.log(\"Fav trail Ids:\", trailsIdsArray)\n        }\n      }\n\n      //GET data from the API\n      let trailResponse = await fetch(`https://www.hikingproject.com/data/get-trails-by-id?ids=${props.match.params.id}&key=${props.apiKey}`)\n      let trailData = await trailResponse.json()\n        //all good?\n      if(trailResponse.ok) {\n        //check the console to make sure we have all the trails\n        console.log(\"trailData\", trailData.trails[0])\n        //populate the newTrails state array with trailData\n        setCurrentTrail(trailData.trails[0])\n        // Upon rednering the component, if the current trail id is one of the favorited ids of the current user, set Favorited to true\n        if (trailsIdsArray.includes(trailData.trails[0].id)) {\n          setFavorited(true)\n        }\n      }\n    } catch (err) {\n        console.log(err)\n      }\n  }\n\n    return (\n      <>\n        <Container>\n          <TrailDisplay\n            currentTrail={currentTrail}\n            favorited={favorited}\n            handleFavorite={handleFavorite}\n            logged_in={props.logged_in}\n          />\n          <CommentIndex \n            trail_id={props.match.params.id}\n            user_name={props.user_name}\n            user_id={props.user_id}\n            trail_name={currentTrail.name}\n            logged_in={props.logged_in}\n          />\n          <NavLink to={`/trails/${trail.id}/questionnaire`}><Button>Trail Questionnaire</Button></NavLink>\n        </Container>\n      </>\n    );\n}\n\nexport default TrailsProfile;"]},"metadata":{},"sourceType":"module"}