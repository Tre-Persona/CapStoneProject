{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/CommentIndex.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useReducer } from \"react\";\nimport { Media, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nvar CommentIndex = function CommentIndex(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentEntry = _useState2[0],\n      setCommentEntry = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      comments = _useState4[0],\n      setComments = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      success = _useState6[0],\n      setSuccess = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      error = _useState8[0],\n      setError = _useState8[1];\n\n  var handleChange = function handleChange(e) {\n    setCommentEntry(e.target.value);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    addToComments();\n  };\n\n  var addToComments = function addToComments() {\n    fetch(\"/comments\", {\n      body: JSON.stringify({\n        post: commentEntry,\n        trail_id: props.match.params.id\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    }).then(function (response) {\n      if (response.ok) setSuccess(true);else setError(true);\n    })[\"catch\"](function (error) {\n      console.log(\"error:\", error);\n    });\n  }; //fetch comments\n\n\n  function getComments() {\n    return _getComments.apply(this, arguments);\n  } //map over comments for :id and display\n\n\n  function _getComments() {\n    _getComments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/comments');\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n\n              //all good?\n              if (response.status === 200) {\n                //check the console to make sure we have all the trails\n                console.log(\"data\", data.comments); //populate the newTrails state array with data\n\n                setComments(data.comments);\n              }\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n    return _getComments.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"commentEntry\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Text Area\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    name: \"commentEntry\",\n    id: \"commentEntry\",\n    value: commentEntry,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Submit\"), comments.map(function (comment, index) {\n    /*#__PURE__*/\n    React.createElement(Media, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Media, {\n      left: true,\n      href: \"#\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Media, {\n      object: true,\n      \"data-src\": \"#\",\n      alt: \"Generic placeholder image\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Media, {\n      body: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, comment.post));\n  }));\n};\n\nexport default CommentIndex;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/CommentIndex.js"],"names":["React","useState","useReducer","Media","Button","Form","FormGroup","Label","Input","FormText","CommentIndex","props","commentEntry","setCommentEntry","comments","setComments","success","setSuccess","error","setError","handleChange","e","target","value","handleSubmit","preventDefault","addToComments","fetch","body","JSON","stringify","post","trail_id","match","params","id","headers","method","then","response","ok","console","log","getComments","json","data","status","map","comment","index"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from \"react\"\nimport { Media, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nconst CommentIndex = (props) => {\n  const [commentEntry, setCommentEntry]= useState(\"\")\n  const [comments, setComments]=useState([])\n  const [success, setSuccess ]=useState(false)\n  const [error, setError ]=useState(false)\n\n\n  const handleChange = (e) =>{\n    setCommentEntry(\n    e.target.value\n    )\n  }\n  const handleSubmit = (e) =>{\n    e.preventDefault()\n    addToComments()\n  }\n\n  const addToComments = () => {\n    fetch(\"/comments\", {\n      body: JSON.stringify({post: commentEntry, trail_id: props.match.params.id}),\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    })\n    .then(response => {\n      if (response.ok) setSuccess(true)\n      else setError(true)\n    }).catch(error => {\n      console.log(\"error:\",error)\n    })\n  }\n  //fetch comments\n  async function getComments() {\n    try {\n      //GET data from the backend\n      let response = await fetch('/comments')\n      \n        let data = await response.json();\n        //all good?\n        if(response.status === 200) {\n          //check the console to make sure we have all the trails\n          console.log(\"data\", data.comments)\n          //populate the newTrails state array with data\n          setComments(data.comments)\n        }\n      } catch (err) {\n        console.log(err)\n      }\n    }\n  //map over comments for :id and display\n\n\n  return ( \n  \n  <>\n      <FormGroup>\n        <Label htmlFor=\"commentEntry\">Text Area</Label>\n        <Input type=\"textarea\" name=\"commentEntry\" id=\"commentEntry\" value={ commentEntry } onChange={ handleChange }/>\n      </FormGroup>\n      <Button onClick={ handleSubmit }>Submit</Button>\n    { comments.map((comment, index)=> {\n        <Media>\n          <Media left href=\"#\">\n            <Media object data-src='#' alt=\"Generic placeholder image\" />\n          </Media>\n          <Media body>\n            { comment.post }\n            </Media>\n          </Media>\n    \n    })}\n  </>\n  );\n};\n\nexport default CommentIndex"]},"metadata":{},"sourceType":"module"}