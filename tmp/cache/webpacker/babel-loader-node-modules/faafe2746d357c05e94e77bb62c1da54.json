{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/UserProfile.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Container } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport Badges from '../partials/user/Badges';\nimport FavoritesList from '../partials/user/FavoritesList';\nimport ActivityList from '../partials/user/ActivityList';\n\nvar UserProfile = function UserProfile(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      favTrails = _useState2[0],\n      setFavTrails = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activity = _useState4[0],\n      setActivity = _useState4[1];\n\n  useEffect(function () {\n    getTrails();\n  }, []);\n\n  function getTrails() {\n    return _getTrails.apply(this, arguments);\n  }\n\n  function _getTrails() {\n    _getTrails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var favResponse, favData, trailsIdsArray, trailResponse, trailData, activityResponse, activityData, sortedData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/favorites');\n\n            case 3:\n              favResponse = _context.sent;\n              _context.next = 6;\n              return favResponse.json();\n\n            case 6:\n              favData = _context.sent;\n\n              if (favResponse.ok) {\n                console.log(\"favData:\", favData); // Create array of just the ids of the trails favorited by current user\n\n                trailsIdsArray = favData.map(function (value) {\n                  return value.fav_trail_id;\n                });\n                console.log(\"Fav trail Ids:\", trailsIdsArray);\n              } //GET trail data from the API\n\n\n              _context.next = 10;\n              return fetch(\"https://www.hikingproject.com/data/get-trails-by-id?ids=\".concat(trailsIdsArray.join(\",\"), \"&key=200805451-d58078a69001bb6f37cb92b68bbebae3\"));\n\n            case 10:\n              trailResponse = _context.sent;\n              _context.next = 13;\n              return trailResponse.json();\n\n            case 13:\n              trailData = _context.sent;\n\n              if (trailResponse.ok) {\n                //check the console to make sure we have all the trails\n                console.log(\"data\", trailData.trails); //populate the newTrails state array with data\n\n                setFavTrails(trailData.trails);\n              }\n\n              _context.next = 17;\n              return fetch('/users/comments');\n\n            case 17:\n              activityResponse = _context.sent;\n              _context.next = 20;\n              return activityResponse.json();\n\n            case 20:\n              activityData = _context.sent;\n\n              if (activityResponse.ok) {\n                sortedData = activityData.sort(function (a, b) {\n                  if (a.updated_at === b.updated_at) return 0;else if (a.updated_at > b.updated_at) return -1;else return 1;\n                });\n                setActivity(sortedData);\n                console.log(\"sorted Activity Data\", sortedData);\n              }\n\n              _context.next = 27;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 24]]);\n    }));\n    return _getTrails.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"User Profile\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \" Hello \", props.user_name), /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/user/\".concat(props.match.params.id, \"/settings\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Settings\")), /*#__PURE__*/React.createElement(FavoritesList, {\n    user_id: props.match.params.id,\n    favTrails: favTrails,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Badges, {\n    user_id: props.user_id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ActivityList, {\n    user_id: props.match.params.id,\n    activity: activity,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default UserProfile;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/UserProfile.js"],"names":["React","useEffect","useState","Button","Container","NavLink","Badges","FavoritesList","ActivityList","UserProfile","props","favTrails","setFavTrails","activity","setActivity","getTrails","fetch","favResponse","json","favData","ok","console","log","trailsIdsArray","map","value","fav_trail_id","join","trailResponse","trailData","trails","activityResponse","activityData","sortedData","sort","a","b","updated_at","user_name","match","params","id","user_id"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,YAAlC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA,kBACKR,QAAQ,CAAC,EAAD,CADb;AAAA;AAAA,MACtBS,SADsB;AAAA,MACXC,YADW;;AAAA,mBAEGV,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,MAEtBW,QAFsB;AAAA,MAEZC,WAFY;;AAI7Bb,EAAAA,SAAS,CAAC,YAAK;AACbc,IAAAA,SAAS;AAAG,GADL,EACM,EADN,CAAT;;AAJ6B,WAOdA,SAPc;AAAA;AAAA;;AAAA;AAAA,0EAO7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAG4BC,KAAK,CAAC,YAAD,CAHjC;;AAAA;AAGQC,cAAAA,WAHR;AAAA;AAAA,qBAIwBA,WAAW,CAACC,IAAZ,EAJxB;;AAAA;AAIQC,cAAAA,OAJR;;AAOI,kBAAGF,WAAW,CAACG,EAAf,EAAmB;AACjBC,gBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,OAAxB,EADiB,CAEjB;;AACAI,gBAAAA,cAAc,GAAGJ,OAAO,CAACK,GAAR,CAAY,UAAAC,KAAK;AAAA,yBAAEA,KAAK,CAACC,YAAR;AAAA,iBAAjB,CAAjB;AACAL,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,cAA9B;AACD,eAZL,CAcI;;;AAdJ;AAAA,qBAe8BP,KAAK,mEAA4DO,cAAc,CAACI,IAAf,CAAoB,GAApB,CAA5D,qDAfnC;;AAAA;AAeQC,cAAAA,aAfR;AAAA;AAAA,qBAgB0BA,aAAa,CAACV,IAAd,EAhB1B;;AAAA;AAgBQW,cAAAA,SAhBR;;AAiBI,kBAAGD,aAAa,CAACR,EAAjB,EAAqB;AACnB;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBO,SAAS,CAACC,MAA9B,EAFmB,CAGnB;;AACAlB,gBAAAA,YAAY,CAACiB,SAAS,CAACC,MAAX,CAAZ;AACD;;AAtBL;AAAA,qBAwBiCd,KAAK,CAAC,iBAAD,CAxBtC;;AAAA;AAwBQe,cAAAA,gBAxBR;AAAA;AAAA,qBAyB6BA,gBAAgB,CAACb,IAAjB,EAzB7B;;AAAA;AAyBQc,cAAAA,YAzBR;;AA0BI,kBAAID,gBAAgB,CAACX,EAArB,EAAyB;AACnBa,gBAAAA,UADmB,GACND,YAAY,CAACE,IAAb,CAAkB,UAACC,CAAD,EAAGC,CAAH,EAAO;AACxC,sBAAID,CAAC,CAACE,UAAF,KAAiBD,CAAC,CAACC,UAAvB,EAAmC,OAAO,CAAP,CAAnC,KACK,IAAIF,CAAC,CAACE,UAAF,GAAeD,CAAC,CAACC,UAArB,EAAiC,OAAO,CAAC,CAAR,CAAjC,KACA,OAAO,CAAP;AACN,iBAJgB,CADM;AAMvBvB,gBAAAA,WAAW,CAACmB,UAAD,CAAX;AACAZ,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCW,UAApC;AACD;;AAlCL;AAAA;;AAAA;AAAA;AAAA;AAoCMZ,cAAAA,OAAO,CAACC,GAAR;;AApCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAP6B;AAAA;AAAA;;AA+C7B,sBACE,uDACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAYZ,KAAK,CAAC4B,SAAlB,CAFF,eAIE,oBAAC,OAAD;AAAS,IAAA,EAAE,kBAAW5B,KAAK,CAAC6B,KAAN,CAAYC,MAAZ,CAAmBC,EAA9B,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAJF,eAQE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAE/B,KAAK,CAAC6B,KAAN,CAAYC,MAAZ,CAAmBC,EAD9B;AAEE,IAAA,SAAS,EAAE9B,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAaE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAED,KAAK,CAACgC,OADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAiBE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEhC,KAAK,CAAC6B,KAAN,CAAYC,MAAZ,CAAmBC,EAD9B;AAEE,IAAA,QAAQ,EAAE5B,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,CADF,CADF;AA2BD,CA1ED;;AA4EA,eAAeJ,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Button, Container } from 'reactstrap'\nimport { NavLink } from 'react-router-dom'\nimport Badges from '../partials/user/Badges'\nimport FavoritesList from '../partials/user/FavoritesList'\nimport ActivityList from '../partials/user/ActivityList'\n\n\nconst UserProfile = (props) => {\n  const [favTrails, setFavTrails] = useState([])\n  const [activity, setActivity] = useState([])\n\n  useEffect(() =>{\n    getTrails()},[])\n\n  async function getTrails() {\n    try {\n      // Fetch JSON of favorites specific to current user\n      let favResponse = await fetch('/favorites')\n      let favData = await favResponse.json()\n      // Declare array to hold only favorited Ids to be used in trail fetch call\n      let trailsIdsArray\n      if(favResponse.ok) {\n        console.log(\"favData:\", favData)\n        // Create array of just the ids of the trails favorited by current user\n        trailsIdsArray = favData.map(value=>value.fav_trail_id)\n        console.log(\"Fav trail Ids:\", trailsIdsArray)\n      }\n\n      //GET trail data from the API\n      let trailResponse = await fetch(`https://www.hikingproject.com/data/get-trails-by-id?ids=${trailsIdsArray.join(\",\")}&key=200805451-d58078a69001bb6f37cb92b68bbebae3`)\n      let trailData = await trailResponse.json()\n      if(trailResponse.ok) {\n        //check the console to make sure we have all the trails\n        console.log(\"data\", trailData.trails)\n        //populate the newTrails state array with data\n        setFavTrails(trailData.trails)\n      }\n\n      let activityResponse = await fetch('/users/comments')\n      let activityData = await activityResponse.json()\n      if (activityResponse.ok) {\n        let sortedData = activityData.sort((a,b)=>{\n          if (a.updated_at === b.updated_at) return 0\n          else if (a.updated_at > b.updated_at) return -1\n          else return 1\n        })\n        setActivity(sortedData)\n        console.log(\"sorted Activity Data\", sortedData)\n      }\n    } catch (err) {\n        console.log(err)\n      }\n  }\n\n  return (\n    <>\n      <Container>\n        <h2>User Profile</h2>\n        <h4> Hello {props.user_name}</h4>\n\n        <NavLink to={`/user/${props.match.params.id}/settings`}>\n          <Button>Settings</Button>\n        </NavLink>\n\n        <FavoritesList \n          user_id={props.match.params.id}\n          favTrails={favTrails}\n        />\n\n        <Badges \n          user_id={props.user_id}\n        />\n\n        <ActivityList \n          user_id={props.match.params.id}\n          activity={activity}\n        />\n\n      </Container>\n    </>\n  );\n}\n\nexport default UserProfile\n"]},"metadata":{},"sourceType":"module"}