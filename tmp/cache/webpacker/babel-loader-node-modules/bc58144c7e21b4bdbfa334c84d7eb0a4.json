{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/UserFavorites.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Container, ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\nimport { NavLink, Redirect } from 'react-router-dom';\n\nvar UserFavorites = function UserFavorites(props) {\n  // Array of trail objects fetched from API\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      trails = _useState2[0],\n      setTrails = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showEmptyMessage = _useState4[0],\n      setShowEmptyMessage = _useState4[1];\n\n  useEffect(function () {\n    getTrails();\n  }, []);\n\n  function getTrails() {\n    return _getTrails.apply(this, arguments);\n  }\n\n  function _getTrails() {\n    _getTrails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var favResponse, favData, trailsIdsArray, trailResponse, trailData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/favorites');\n\n            case 3:\n              favResponse = _context.sent;\n              _context.next = 6;\n              return favResponse.json();\n\n            case 6:\n              favData = _context.sent;\n              // Declare array to hold only favorited Ids to be used in trail fetch call\n              trailsIdsArray = [];\n\n              if (favResponse.ok) {\n                console.log(\"favData:\", favData); // Create array of just the ids of the trails favorited by current user\n\n                trailsIdsArray = favData.map(function (value) {\n                  return value.fav_trail_id;\n                });\n                console.log(\"Fav trail Ids:\", trailsIdsArray);\n                if (favData.length === 0) setShowEmptyMessage(true);\n              } //GET trail data from the API\n\n\n              if (!(trailsIdsArray.length > 0)) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 12;\n              return fetch(\"https://www.hikingproject.com/data/get-trails-by-id?ids=\".concat(trailsIdsArray.join(\",\"), \"&key=\").concat(props.apiKey));\n\n            case 12:\n              trailResponse = _context.sent;\n              _context.next = 15;\n              return trailResponse.json();\n\n            case 15:\n              trailData = _context.sent;\n\n              if (trailResponse.ok) {\n                //check the console to make sure we have all the trails\n                console.log(\"data\", trailData.trails); //populate the newTrails state array with data\n\n                setTrails(trailData.trails);\n              }\n\n            case 17:\n              _context.next = 22;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 19]]);\n    }));\n    return _getTrails.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.user_id != props.match.params.id && /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: \"trails-index-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"page-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"Your Favorite Trails\"), /*#__PURE__*/React.createElement(ListGroup, {\n    className: \"trails-index-list-group\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, trails.map(function (trail, index) {\n    return /*#__PURE__*/React.createElement(ListGroupItem, {\n      key: index,\n      className: \"trails-index-list-wrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: \"/trails/\".concat(trail.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"trails-index-list-image\",\n      src: trail.imgSmallMed,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"trails-index-list-text-box\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      className: \"trails-index-list-link\",\n      to: \"/trails/\".concat(trail.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItemHeading, {\n      className: \"trails-index-list-title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 23\n      }\n    }, trail.name)), /*#__PURE__*/React.createElement(ListGroupItemText, {\n      className: \"trails-index-list-text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }\n    }, trail.location), /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 56\n      }\n    }), trail.summary)));\n  })), showEmptyMessage && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"favorites-empty-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"You haven't favorited any trails yet.\")));\n};\n\nexport default UserFavorites;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/UserFavorites.js"],"names":["React","useState","useEffect","Button","Container","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","NavLink","Redirect","UserFavorites","props","trails","setTrails","showEmptyMessage","setShowEmptyMessage","getTrails","fetch","favResponse","json","favData","trailsIdsArray","ok","console","log","map","value","fav_trail_id","length","join","apiKey","trailResponse","trailData","user_id","match","params","id","trail","index","imgSmallMed","name","location","summary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Button, Container, ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap'\nimport { NavLink, Redirect } from 'react-router-dom'\n\n\nconst UserFavorites = props => {\n  // Array of trail objects fetched from API\n  const [trails, setTrails] = useState([])\n  const [showEmptyMessage, setShowEmptyMessage] = useState(false)\n\n  useEffect(() =>{\n    getTrails()},[])\n\n  async function getTrails() {\n    try {\n      // Fetch JSON of favorites specific to current user\n      let favResponse = await fetch('/favorites')\n      let favData = await favResponse.json()\n      // Declare array to hold only favorited Ids to be used in trail fetch call\n      let trailsIdsArray = []\n      if(favResponse.ok) {\n        console.log(\"favData:\", favData)\n        // Create array of just the ids of the trails favorited by current user\n        trailsIdsArray = favData.map(value=>value.fav_trail_id)\n        console.log(\"Fav trail Ids:\", trailsIdsArray)\n        if (favData.length === 0) setShowEmptyMessage(true)\n      }\n\n      //GET trail data from the API\n      if (trailsIdsArray.length > 0) {\n        let trailResponse = await fetch(`https://www.hikingproject.com/data/get-trails-by-id?ids=${trailsIdsArray.join(\",\")}&key=${props.apiKey}`)\n        let trailData = await trailResponse.json()\n        if(trailResponse.ok) {\n          //check the console to make sure we have all the trails\n          console.log(\"data\", trailData.trails)\n          //populate the newTrails state array with data\n          setTrails(trailData.trails)\n        }\n      }\n    } catch (err) {\n        console.log(err)\n      }\n  }\n\n    return (\n      <>\n        {props.user_id != props.match.params.id &&\n          <Redirect to=\"/\" />\n        }\n        <Container className=\"trails-index-container\">\n          <h2 className=\"page-title\">Your Favorite Trails</h2>\n          <ListGroup className=\"trails-index-list-group\">\n            {trails.map((trail,index) => {\n              return(\n                <ListGroupItem key={index} className=\"trails-index-list-wrapper\">\n\n                  <NavLink to={`/trails/${ trail.id }`}>\n                    <img className=\"trails-index-list-image\" src={trail.imgSmallMed} />\n                  </NavLink>\n\n                  <div className=\"trails-index-list-text-box\">\n                    <NavLink className=\"trails-index-list-link\" to={`/trails/${ trail.id }`}>\n                      <ListGroupItemHeading className=\"trails-index-list-title\">{trail.name}</ListGroupItemHeading>\n                    </NavLink>\n\n                    <ListGroupItemText className=\"trails-index-list-text\">\n                      <strong>{trail.location}</strong><br/>\n                      {trail.summary}\n                    </ListGroupItemText>\n                  </div>\n\n                </ListGroupItem>\n              )\n            })}\n          </ListGroup>\n          {showEmptyMessage &&\n            <p className=\"favorites-empty-message\">You haven't favorited any trails yet.</p>\n          }\n        </Container>\n      </>\n    );\n}\n\nexport default UserFavorites"]},"metadata":{},"sourceType":"module"}