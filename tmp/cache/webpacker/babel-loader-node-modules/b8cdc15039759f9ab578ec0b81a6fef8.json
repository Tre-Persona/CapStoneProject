{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\n\nfunction getComments(_x) {\n  return _getComments.apply(this, arguments);\n}\n\nfunction _getComments() {\n  _getComments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(trail_id) {\n    var response, data, sortedData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch('/comments');\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context.sent;\n\n            //all good?\n            if (response.status === 200) {\n              //check the console to make sure we have all the trails\n              console.log(\"data\", data);\n              sortedData = data.filter(function (trail) {\n                return trail.trail_id == trail_id;\n              }); //populate the newTrails state array with data\n\n              setComments(sortedData);\n              console.log(\"sortedData\", sortedData);\n            }\n\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n  return _getComments.apply(this, arguments);\n}\n\nvar deleteComment = function deleteComment(id) {\n  fetch(\"/comments/\".concat(id), {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"DELETE\"\n  }).then(function (response) {\n    if (response.ok) {\n      getComments();\n    }\n  });\n};\n\nexport { getComments, deleteComment };","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/services/comment_fetches.js"],"names":["React","getComments","trail_id","fetch","response","json","data","status","console","log","sortedData","filter","trail","setComments","deleteComment","id","headers","method","then","ok"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;SAEeC,W;;;;;0EAAf,iBAA2BC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAG2BC,KAAK,CAAC,WAAD,CAHhC;;AAAA;AAGUC,YAAAA,QAHV;AAAA;AAAA,mBAKyBA,QAAQ,CAACC,IAAT,EALzB;;AAAA;AAKYC,YAAAA,IALZ;;AAMQ;AACA,gBAAGF,QAAQ,CAACG,MAAT,KAAoB,GAAvB,EAA4B;AAC1B;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB;AACII,cAAAA,UAHsB,GAGTJ,IAAI,CAACK,MAAL,CAAY,UAAAC,KAAK,EAAI;AACpC,uBAAOA,KAAK,CAACV,QAAN,IAAkBA,QAAzB;AACD,eAFgB,CAHS,EAM1B;;AACAW,cAAAA,WAAW,CAACH,UAAD,CAAX;AACAF,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,UAA1B;AACD;;AAhBT;AAAA;;AAAA;AAAA;AAAA;AAkBQF,YAAAA,OAAO,CAACC,GAAR;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAQ;AAC1BZ,EAAAA,KAAK,qBAAcY,EAAd,GAAoB;AACvBC,IAAAA,OAAO,EAAC;AACN,sBAAgB;AADV,KADe;AAIvBC,IAAAA,MAAM,EAAE;AAJe,GAApB,CAAL,CAMCC,IAND,CAMM,UAAAd,QAAQ,EAAI;AAChB,QAAIA,QAAQ,CAACe,EAAb,EAAiB;AACflB,MAAAA,WAAW;AACZ;AACF,GAVD;AAWD,CAZH;;AAcA,SAASA,WAAT,EAAsBa,aAAtB","sourcesContent":["import React from 'react'\n\nasync function getComments(trail_id) {\n    try {\n      //GET data from the backend\n      let response = await fetch('/comments')\n      \n        let data = await response.json()\n        //all good?\n        if(response.status === 200) {\n          //check the console to make sure we have all the trails\n          console.log(\"data\", data)\n          let sortedData = data.filter(trail => {\n            return trail.trail_id == trail_id\n          })\n          //populate the newTrails state array with data\n          setComments(sortedData)\n          console.log(\"sortedData\", sortedData)\n        }\n      } catch (err) {\n        console.log(err)\n    }\n  }\n  \n\nconst deleteComment = (id) => {\n    fetch(`/comments/${id}`, {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    })\n    .then(response => {\n      if (response.ok) {\n        getComments()\n      }\n    })\n  }\n\nexport { getComments, deleteComment }"]},"metadata":{},"sourceType":"module"}