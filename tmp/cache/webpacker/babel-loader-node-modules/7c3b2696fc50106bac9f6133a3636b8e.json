{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/CommentIndex.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from \"react\"; // import CommentEdit from '../partials/comments/CommentEdit'\n// import CommentNew from '../partials/comments/CommentNew'\n// import CommentIndex from '../partials/comments/CommentIndex'\n\nimport { Container, Media, Button, Form, FormGroup, Label, Input, FormText, ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\n\nvar Comments = function Comments(props) {\n  // State for a new comment (written in the comment form)\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentEntry = _useState2[0],\n      setCommentEntry = _useState2[1]; // State for existing comment within the editor form\n\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentEditEntry = _useState4[0],\n      setCommentEditEntry = _useState4[1]; // Array holding the ID of the comment that is in editor mode. ID gets removed after leaving edidtor mode\n\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      editArray = _useState6[0],\n      setEditArray = _useState6[1]; // Allows only one comment to be in editor mode at a time\n\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      editorOn = _useState8[0],\n      setEditorOn = _useState8[1]; // Array of comment objects fetched from the API\n\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      comments = _useState10[0],\n      setComments = _useState10[1]; // Fetch all trail comments upon render\n\n\n  useEffect(function () {\n    getComments();\n  }, []); // ---------- CODE FOR TYPING/POSTING NEW COMMENT ----------\n  // Set state of commentEntry to whatever the form input is \n\n  var handleChange = function handleChange(e) {\n    setCommentEntry(e.target.value);\n  }; // Only call POST function if comment isn't blank\n\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    if (commentEntry === \"\") return;else addToComments();\n  }; // Fetch request to POST comment\n\n\n  var addToComments = function addToComments() {\n    fetch(\"/comments\", {\n      // JSON needs to include comment string, trail id, and user name\n      body: JSON.stringify({\n        post: commentEntry,\n        trail_id: props.match.params.id,\n        user_name: props.user_name\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    }).then(function (response) {\n      if (response.ok) {\n        // If post successful, clear new comment form\n        setCommentEntry(\"\"); // Refetch comments upon adding new comment\n\n        getComments();\n      }\n    })[\"catch\"](function (error) {\n      console.log(\"error:\", error);\n    });\n  }; // ---------- CODE FOR EDITING/UPDATING EXISTING COMMENT ----------\n  // Upon clicking the Edit button, do the following:\n\n\n  var handleEditClick = function handleEditClick(id) {\n    // Check that the particular comment's ID is not in the \"editArray\" and editor mode is not open elsewhere\n    if (!editArray.includes(id) && !editorOn) {\n      // Set editor mode to true to prevent other editors from opening\n      setEditorOn(true); // Add comment ID to array\n\n      setEditArray([].concat(_toConsumableArray(editArray), [id])); // Fetch the comment text to display in the edit form\n\n      getCommentBody(id);\n    } // \n    else if (editArray.includes(id) && editorOn) {\n        setEditorOn(false);\n        var temp = editArray.filter(function (num) {\n          return num !== id;\n        });\n        setEditArray(temp);\n        setCommentEditEntry(\"\");\n      }\n  }; //\n\n\n  function getCommentBody(_x) {\n    return _getCommentBody.apply(this, arguments);\n  } // Set state of commentEditEntry to \n\n\n  function _getCommentBody() {\n    _getCommentBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"/comments/\".concat(id, \"/edit\"));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n\n              if (response.ok) {\n                setCommentEditEntry(data.post);\n              }\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n    return _getCommentBody.apply(this, arguments);\n  }\n\n  var handleChangeEdit = function handleChangeEdit(e) {\n    e.preventDefault();\n    setCommentEditEntry(e.target.value);\n  }; //\n\n\n  var updateComment = function updateComment(id, trailId) {\n    fetch(\"/comments/\".concat(id), {\n      body: JSON.stringify({\n        post: commentEditEntry,\n        trail_id: trailId,\n        user_name: props.user_name\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"PATCH\"\n    }).then(function (response) {\n      if (response.ok) {\n        var temp = editArray.filter(function (num) {\n          return num !== id;\n        });\n        setEditArray(temp);\n        setEditorOn(false);\n        getComments();\n      }\n    })[\"catch\"](function (error) {\n      console.log(\"error:\", error);\n    });\n  }; // ---------- CODE FOR FETCHIING ALL TRAIL COMMENTS ----------\n\n\n  function getComments() {\n    return _getComments.apply(this, arguments);\n  } // ---------- CODE FOR DELETING COMMENT ----------\n\n\n  function _getComments() {\n    _getComments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, data, sortedData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch('/comments');\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context2.sent;\n\n              //all good?\n              if (response.status === 200) {\n                //check the console to make sure we have all the trails\n                console.log(\"data\", data);\n                sortedData = data.filter(function (trail) {\n                  return trail.trail_id == props.match.params.id;\n                }); //populate the newTrails state array with data\n\n                setComments(sortedData);\n                console.log(\"sortedData\", sortedData);\n              }\n\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 10]]);\n    }));\n    return _getComments.apply(this, arguments);\n  }\n\n  var deleteComment = function deleteComment(id) {\n    fetch(\"/comments/\".concat(id), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    }).then(function (response) {\n      if (response.ok) {\n        getComments();\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"commentEntry\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, \"Add Comment\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    name: \"commentEntry\",\n    id: \"commentEntry\",\n    value: commentEntry,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, comments.map(function (comment, index) {\n    var editable = false;\n    if (props.user_id === comment.user_id) editable = true;\n    var date = comment.updated_at.substring(0, 10);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListGroupItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, editArray.includes(comment.id) && /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"commentEditEntry\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 51\n      }\n    }, \"Edit Comment\")), /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"commentEditEntry\",\n      id: \"commentEditEntry\",\n      value: commentEditEntry,\n      onChange: handleChangeEdit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: function onClick() {\n        return updateComment(comment.id, comment.trail_id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, \"Update\")), !editArray.includes(comment.id) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListGroupItemText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, comment.user_name), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 58\n      }\n    }, date)), /*#__PURE__*/React.createElement(ListGroupItemText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, comment.post)), editable && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      onClick: function onClick() {\n        return handleEditClick(comment.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    }, editArray.includes(comment.id) && \"Cancel\", !editArray.includes(comment.id) && \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n      alt: \"delete comment\",\n      color: \"danger\",\n      onClick: function onClick() {\n        return deleteComment(comment.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 19\n      }\n    }, \"Delete\"))));\n  })));\n};\n\nexport default Comments;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/CapStoneProject/app/javascript/components/pages/CommentIndex.js"],"names":["React","useState","useEffect","Container","Media","Button","Form","FormGroup","Label","Input","FormText","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","Comments","props","commentEntry","setCommentEntry","commentEditEntry","setCommentEditEntry","editArray","setEditArray","editorOn","setEditorOn","comments","setComments","getComments","handleChange","e","target","value","handleSubmit","preventDefault","addToComments","fetch","body","JSON","stringify","post","trail_id","match","params","id","user_name","headers","method","then","response","ok","error","console","log","handleEditClick","includes","getCommentBody","temp","filter","num","json","data","handleChangeEdit","updateComment","trailId","status","sortedData","trail","deleteComment","map","comment","index","editable","user_id","date","updated_at","substring"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n// import CommentEdit from '../partials/comments/CommentEdit'\n// import CommentNew from '../partials/comments/CommentNew'\n// import CommentIndex from '../partials/comments/CommentIndex'\nimport { Container, Media, Button, Form, FormGroup, Label, Input, FormText, ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\n\nconst Comments = (props) => {\n  // State for a new comment (written in the comment form)\n  const [commentEntry, setCommentEntry] = useState(\"\")\n  // State for existing comment within the editor form\n  const [commentEditEntry, setCommentEditEntry] = useState(\"\")\n  // Array holding the ID of the comment that is in editor mode. ID gets removed after leaving edidtor mode\n  const [editArray, setEditArray] = useState([])\n  // Allows only one comment to be in editor mode at a time\n  const [editorOn, setEditorOn] = useState(false)\n  // Array of comment objects fetched from the API\n  const [comments, setComments] = useState([])\n\n  // Fetch all trail comments upon render\n  useEffect(() => {\n    getComments()},[])\n\n  // ---------- CODE FOR TYPING/POSTING NEW COMMENT ----------\n  \n  // Set state of commentEntry to whatever the form input is \n  const handleChange = (e) =>{\n    setCommentEntry(e.target.value)\n  }\n\n  // Only call POST function if comment isn't blank\n  const handleSubmit = (e) =>{\n    e.preventDefault()\n    if (commentEntry === \"\") return\n    else addToComments()\n  }\n\n  // Fetch request to POST comment\n  const addToComments = () => {\n    fetch(\"/comments\", {\n      // JSON needs to include comment string, trail id, and user name\n      body: JSON.stringify({post: commentEntry, trail_id: props.match.params.id, user_name: props.user_name}),\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    })\n    .then(response => {\n      if (response.ok) {\n        // If post successful, clear new comment form\n        setCommentEntry(\"\")\n        // Refetch comments upon adding new comment\n        getComments()\n      }\n    })\n    .catch(error => {\n      console.log(\"error:\",error)\n    })\n  }\n\n  // ---------- CODE FOR EDITING/UPDATING EXISTING COMMENT ----------\n\n  // Upon clicking the Edit button, do the following:\n  const handleEditClick = id => {\n    // Check that the particular comment's ID is not in the \"editArray\" and editor mode is not open elsewhere\n    if (!editArray.includes(id) && !editorOn) {\n      // Set editor mode to true to prevent other editors from opening\n      setEditorOn(true)\n      // Add comment ID to array\n      setEditArray([...editArray, id])\n      // Fetch the comment text to display in the edit form\n      getCommentBody(id)\n    } // \n      else if (editArray.includes(id) && editorOn) {\n      setEditorOn(false)\n      let temp = editArray.filter(num=> num !== id)\n      setEditArray(temp)\n      setCommentEditEntry(\"\")\n    }\n  }\n\n  //\n  async function getCommentBody(id) {\n    try {\n      let response = await fetch(`/comments/${id}/edit`)\n      let data = await response.json()\n      if (response.ok) {\n        setCommentEditEntry(data.post)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // Set state of commentEditEntry to \n  const handleChangeEdit = e => {\n    e.preventDefault()\n    setCommentEditEntry(e.target.value)\n  }\n\n  //\n  const updateComment = (id, trailId) => {\n    fetch(`/comments/${id}`, {\n      body: JSON.stringify({post: commentEditEntry, trail_id: trailId, user_name: props.user_name}),\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"PATCH\"\n    })\n    .then(response => {\n      if (response.ok) {\n        let temp = editArray.filter(num=> num !== id)\n        setEditArray(temp)\n        setEditorOn(false)\n        getComments()\n      }\n    })\n    .catch(error => {\n      console.log(\"error:\",error)\n    })\n  }\n\n  // ---------- CODE FOR FETCHIING ALL TRAIL COMMENTS ----------\n\n  async function getComments() {\n    try {\n      //GET data from the backend\n      let response = await fetch('/comments')\n      \n        let data = await response.json()\n        //all good?\n        if(response.status === 200) {\n          //check the console to make sure we have all the trails\n          console.log(\"data\", data)\n          let sortedData = data.filter(trail => {\n            return trail.trail_id == props.match.params.id\n          })\n          //populate the newTrails state array with data\n          setComments(sortedData)\n          console.log(\"sortedData\", sortedData)\n        }\n      } catch (err) {\n        console.log(err)\n    }\n  }\n  \n  // ---------- CODE FOR DELETING COMMENT ----------\n\n  const deleteComment = (id) => {\n    fetch(`/comments/${id}`, {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    })\n    .then(response => {\n      if (response.ok) {\n        getComments()\n      }\n    })\n  }\n\n  return ( \n  \n  <Container>\n      <FormGroup>\n        <Label htmlFor=\"commentEntry\">Add Comment</Label>\n        <Input type=\"textarea\" name=\"commentEntry\" id=\"commentEntry\" value={ commentEntry } onChange={ handleChange }/>\n      </FormGroup>\n      <Button onClick={ handleSubmit }>Submit</Button>\n\n      <ListGroup>\n    { comments.map((comment, index)=> {\n      let editable = false\n        if(props.user_id === comment.user_id) editable = true\n        let date = comment.updated_at.substring(0,10)\n      return(\n        <>\n          <ListGroupItem>\n            {editArray.includes(comment.id) &&\n              <FormGroup>\n                <Label htmlFor=\"commentEditEntry\"><strong>Edit Comment</strong></Label>\n                <Input type=\"textarea\" name=\"commentEditEntry\" id=\"commentEditEntry\" value={ commentEditEntry } onChange={ handleChangeEdit }/>\n                <Button onClick={ () => updateComment(comment.id,comment.trail_id) }>Update</Button>\n              </FormGroup>\n            }\n            \n              {!editArray.includes(comment.id) &&\n                <>\n                  <ListGroupItemText>\n                    <strong>{comment.user_name}</strong> <i>{ date }</i>\n                  </ListGroupItemText>\n                  <ListGroupItemText>\n                    { comment.post }\n                  </ListGroupItemText>\n                </>\n              }\n              \n              { editable &&\n                <>\n                  <Button onClick={ () => handleEditClick(comment.id) }>\n                    {editArray.includes(comment.id) && \"Cancel\"}\n                    {!editArray.includes(comment.id) && \"Edit\"}\n                  </Button>\n                  <Button alt=\"delete comment\" color=\"danger\" onClick={ () => deleteComment(comment.id) }>Delete</Button>\n                </>\n              }\n            </ListGroupItem>\n        </>\n      )\n    })}\n    </ListGroup>\n  </Container>\n  )\n}\n\nexport default Comments"]},"metadata":{},"sourceType":"module"}